#! /usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'yaml'
require File.join(File.dirname(__FILE__), '../lib/joyent')
require 'highline/import'

class JoyentCLI < Thor
  private

  def get_connection
    get_config unless load_config

    Joyent::Connection.new(@username, @password)
  end

  def load_config
    config_file = File.join(ENV['HOME'], ".joyentcli")
    if File.exists?(config_file)
      config = YAML.load(File.open(config_file, 'r').read)
      @username = config["username"]
      @password = config["password"]
      return true
    else
      return false
    end
  end

  def get_config
    @username = ask("Username (login): ")
    @password = ask("Password: "){|q| q.echo = false}

    config_file = File.join(ENV['HOME'], ".joyentcli")
    config = {"username" => @username, "password" => @password}
    File.open(config_file, 'w+') {|f|
      f.puts config.to_yaml
    }
  end

  public

  # 
  # Datacenters
  #
  desc "list_datacenters", "list all of the available datacenters"
  def list_datacenters
    conn = get_connection
    conn.datacenters.list.each do |dc|
      puts "#{dc.name}: #{dc.url}"
    end
  end

  # 
  # Datasets
  #
  desc "list_datasets", "list all of the datasets available"
  def list_datasets
    conn = get_connection
    conn.datasets.list.each do |d|
      puts "#{d.name}: #{d.os} (#{d.urn})"
    end
  end

  # 
  # Packages
  #
  desc "list_packages", "list all of the packages available"
  def list_packages
    conn = get_connection
    conn.packages.list.each do |p|
      puts "#{p.name}: RAM-#{p.memory} HD-#{p.disk}"
    end
  end

  # 
  # Machines
  #
  desc "list_machines", "list all of the machines on the account"
  def list_machines
    conn = get_connection
    conn.machines.list.each do |m|
      puts "#{m.name} [#{m.id}]: #{m.dataset} (#{m.state})"
    end
  end

  desc "create_machine", "create a new joyent machine"
  method_option :name, :type => :string, :aliases => "-n"
  method_option :package, :type => :string, :aliases => "-p"
  method_option :dataset, :type => :string, :aliases => "-d"
  def create_machine
    conn = get_connection
    m = conn.machines.create(options)
    puts "#{m.name}: #{m.dataset} (#{m.state})"
  end

  desc "stop_machine ID", "stops the machine with the given ID"
  def stop_machine(id)
    conn = get_connection
    m = conn.machines.get(id)
    m.stop
    puts "#{m.name} [#{m.id}] STOPPED"
  end

  desc "start_machine ID", "starts the machine with the given ID"
  def start_machine(id)
    conn = get_connection
    m = conn.machines.get(id)
    m.start
    puts "#{m.name} [#{m.id}] STARTED"
  end

  desc "reboot_machine ID", "reboots the machine with the given ID"
  def reboot_machine(id)
    conn = get_connection
    m = conn.machines.get(id)
    m.reboot
    puts "#{m.name} [#{m.id}] REBOOTED"
  end

  desc "resize_machine ID PACKAGE", "stops the machine with the given ID to the specified PACKAGE"
  def resize_machine(id, package)
    conn = get_connection
    m = conn.machines.get(id)
    m.resize(package)
    puts "#{m.name} [#{m.id}] RESIZED to #{package}"
  end

  desc "delete_machine ID", "deletes the machine with the given ID"
  def delete_machine(id)
    conn = get_connection
    m = conn.machines.get(id)
    m.delete
    puts "#{m.name} [#{m.id}] DELETED"
  end
end

JoyentCLI.start
